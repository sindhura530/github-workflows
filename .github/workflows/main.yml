name: CI/CD pipeline
on:
  push: 
     branches: [feature]
  
jobs:
  inputs:
     uses: sindhura530/github-workflows/.github/workflows/pipelineConfig.yml@feature
     
  check:
     needs: inputs
     if: "contains(needs.inputs.outputs.buildTool, 'maven')"
     uses: sindhura530/github-workflows/.github/workflows/maven.yml@feature  
   
   
        
  check1:
    needs: inputs
    if: "contains(needs.inputs.outputs.buildTool, 'npm') && contains(needs.inputs.outputs.language, 'java') && contains(needs.inputs.outputs.javaVersion, 1.8)"
    uses: sindhura530/github-workflows/.github/workflows/npm.yml@feature
    with:
      image_name: ubuntu
    secrets:
       registry_username: ${{ secrets.REGISTRY_USERNAME }}
       registry_password: ${{ secrets.REGISTRY_PASSWORD }}
       

  Code-Quality:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [check, check1]
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@v3
       - name: code Analysis
         run: echo 'mvn sonar:sonar'
          
  security-scan:
    if: ${{ always() }}
    needs: [Code-Quality]
    #if: github.event.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@v3
       - name: scanning
         run: echo 'scanning'
         
  Quality-Gates:
    if: ${{ always() }}
    #if: github.event.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [security-scan]
    steps:
       - uses: actions/checkout@v3
       - name: CodeAnalysis_Quality_gates
         run: echo 'code analysis quality gates'
       - name: SecurityAnalysis_Quality_gates
         run: echo 'security analysis quality gates'
         
  ChangeRequest_Validation:
    if: ${{ always() && github.event.ref == 'refs/heads/main' }}
    needs: [Quality-Gates]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: validations status
        run: echo 'ChangeRequest Validation "performed"'
    
  Deploy_Develop:
    if: ${{ always() && github.event.ref == 'refs/heads/feature' }}
    needs: [Quality-Gates]
    runs-on: ubuntu-latest
    environment: 
      name: Development 
    steps:
      - name: checking out code
        uses: actions/checkout@v2
        
      - name: extract git commit data
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Update author information
        run: echo ${{ env.GIT_COMMIT_AUTHOR_NAME }} > AUTHOR
     

      - name: Raise PR 
        uses: peter-evans/create-pull-request@v3
        with:
          branch: "develop"
          base: feature
          title: "auto PR1"
          committer: ${{ env.GIT_COMMIT_AUTHOR_NAME }} <${{ env.GIT_COMMIT_AUTHOR_EMAIL }}">
          author: ${{ env.GIT_COMMIT_AUTHOR_NAME }} <${{ env.GIT_COMMIT_AUTHOR_EMAIL }}">
          body:
            This is to show automatic PR creation
          token: ${{ secrets.GITHUB_TOKEN }}
          delete-branch: true
          
  Deploy_Stage:
    if: ${{ always() && github.event.ref == 'refs/heads/develop' }}
    needs: [Quality-Gates]
    runs-on: ubuntu-latest
    environment: 
      name: Staging 
    steps:
       - uses: actions/checkout@v3
       - name: deploying into develop branch
         run: echo 'develop branch'
         
  Deploy_PROD:
    if: ${{ always() && github.event.ref == 'refs/heads/main' }}
    needs: [ChangeRequest_Validation]
    runs-on: ubuntu-latest
    environment: 
      name: Production
    steps:
       - uses: actions/checkout@v3
       - name: deploying to Prod
         run: echo 'master branch'
